// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  plan      Plan     @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contentGenerations ContentGeneration[]
  campaigns          Campaign[]
  analytics          Analytics[]
  teamMembers        TeamMember[]
  organizations      Organization[] @relation("OrganizationMembers")

  @@map("users")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members User[] @relation("OrganizationMembers")
  teams   Team[]

  @@map("organizations")
}

model Team {
  id             String   @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  members      TeamMember[]

  @@map("teams")
}

model TeamMember {
  id     String @id @default(cuid())
  userId String
  teamId String
  role   Role   @default(MEMBER)

  // Relations
  user User   @relation(fields: [userId], references: [id])
  team Team   @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
  @@map("team_members")
}

model ContentGeneration {
  id          String   @id @default(cuid())
  userId      String
  type        ContentType
  prompt      String
  result      String
  tokensUsed  Int
  cost        Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("content_generations")
}

model Campaign {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  status      CampaignStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("campaigns")
}

model Analytics {
  id          String   @id @default(cuid())
  userId      String
  metric      String
  value       Float
  date        DateTime
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("analytics")
}

enum Role {
  USER
  ADMIN
  MEMBER
  OWNER
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum ContentType {
  BLOG_POST
  EMAIL
  SOCIAL_MEDIA
  AD_COPY
  PRODUCT_DESCRIPTION
  LANDING_PAGE
  SALES_PAGE
  EMAIL_SEQUENCE
  WEBSITE_COPY
  OTHER
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

