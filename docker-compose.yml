version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ai-marketing-postgres
    environment:
      POSTGRES_DB: ai_marketing
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ai-marketing-network
    restart: unless-stopped

  # Redis para cache
  redis:
    image: redis:7-alpine
    container_name: ai-marketing-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-marketing-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend FastAPI
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: ai-marketing-backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_marketing
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./templates:/app/templates
    depends_on:
      - postgres
      - redis
    networks:
      - ai-marketing-network
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-marketing-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ai-marketing-network
    restart: unless-stopped
    command: npm run dev

  # Worker Celery para tareas en background
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: ai-marketing-celery-worker
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_marketing
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - ai-marketing-network
    restart: unless-stopped
    command: celery -A backend.celery_app worker --loglevel=info

  # Beat Celery para tareas programadas
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: ai-marketing-celery-beat
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_marketing
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - ai-marketing-network
    restart: unless-stopped
    command: celery -A backend.celery_app beat --loglevel=info

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ai-marketing-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - ai-marketing-network
    restart: unless-stopped

  # Flower para monitoreo de Celery
  flower:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: ai-marketing-flower
    environment:
      - REDIS_URL=redis://redis:6379
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    networks:
      - ai-marketing-network
    restart: unless-stopped
    command: celery -A backend.celery_app flower --port=5555

  # Prometheus para m√©tricas
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-marketing-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ai-marketing-network
    restart: unless-stopped

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ai-marketing-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ai-marketing-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  ai-marketing-network:
    driver: bridge