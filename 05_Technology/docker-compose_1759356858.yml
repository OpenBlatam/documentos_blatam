version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_marketing_feedback
      POSTGRES_USER: feedback_user
      POSTGRES_PASSWORD: feedback_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=es_ES.UTF-8 --lc-ctype=es_ES.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U feedback_user -d ai_marketing_feedback"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - feedback_network

  # Redis para caching y colas
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - feedback_network

  # Aplicaci√≥n principal
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      HOST: 0.0.0.0
      DATABASE_URL: "postgresql://feedback_user:feedback_password_2024@db:5432/ai_marketing_feedback?schema=public"
      REDIS_URL: "redis://:redis_password_2024@redis:6379"
      JWT_SECRET: "jwt_secret_super_seguro_2024_ai_marketing"
      VALID_API_KEYS: "api_key_1,api_key_2,api_key_3"
      ALLOWED_ORIGINS: "http://localhost:3000,https://ai-marketing-feedback.com"
      SMTP_HOST: "smtp.gmail.com"
      SMTP_PORT: 587
      SMTP_USER: "noreply@ai-marketing-feedback.com"
      SMTP_PASS: "smtp_password_2024"
    ports:
      - "3001:3001"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - feedback_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - feedback_network

  # Worker para procesamiento de colas
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: "postgresql://feedback_user:feedback_password_2024@db:5432/ai_marketing_feedback?schema=public"
      REDIS_URL: "redis://:redis_password_2024@redis:6379"
      JWT_SECRET: "jwt_secret_super_seguro_2024_ai_marketing"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - feedback_network
    command: ["npm", "run", "worker"]

  # Monitoring con Prometheus
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - feedback_network

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin_password_2024
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - feedback_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  feedback_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16