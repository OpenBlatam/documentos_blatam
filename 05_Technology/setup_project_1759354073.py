#!/usr/bin/env python3
"""
Sistema de Configuraci√≥n Inicial para Proyecto Frontier
Configura la organizaci√≥n inicial del proyecto
"""

import os
import json
from pathlib import Path
from datetime import datetime
from organize_project import FrontierOrganizer

class ProjectSetup:
    def __init__(self, root_path: str = "/Users/adan/frontier"):
        self.root_path = Path(root_path)
        self.organizer = FrontierOrganizer(root_path)
    
    def setup_initial_organization(self):
        """Configura la organizaci√≥n inicial del proyecto"""
        print("üöÄ Configurando organizaci√≥n inicial del proyecto Frontier...")
        
        # Crear estructura de directorios
        self.create_directory_structure()
        
        # Crear archivos de configuraci√≥n
        self.create_config_files()
        
        # Configurar scripts
        self.setup_scripts()
        
        # Crear archivos √≠ndice
        self.create_index_files()
        
        # Organizar archivos existentes
        self.organize_existing_files()
        
        print("‚úÖ Configuraci√≥n inicial completada!")
    
    def create_directory_structure(self):
        """Crea la estructura de directorios"""
        print("üìÅ Creando estructura de directorios...")
        
        for category_id, category_info in self.organizer.config["categories"].items():
            category_path = self.root_path / category_id
            category_path.mkdir(exist_ok=True)
            
            # Crear subcategor√≠as
            for subcategory in category_info["subcategories"]:
                subcategory_path = category_path / subcategory
                subcategory_path.mkdir(exist_ok=True)
            
            print(f"  ‚úÖ {category_id}: {category_info['name']}")
    
    def create_config_files(self):
        """Crea archivos de configuraci√≥n"""
        print("‚öôÔ∏è Creando archivos de configuraci√≥n...")
        
        # Guardar configuraci√≥n
        config_file = self.root_path / "organization_config.json"
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(self.organizer.config, f, indent=2, ensure_ascii=False)
        
        # Crear .gitignore para organizaci√≥n
        gitignore_content = """# Archivos de organizaci√≥n
organization_config.json
ORGANIZATION_REPORT.md
WEEKLY_MAINTENANCE_REPORT.md
MONTHLY_MAINTENANCE_REPORT.md
logs/

# Archivos temporales
*.tmp
*.temp
*.bak
*.old

# Archivos de sistema
.DS_Store
Thumbs.db
"""
        
        gitignore_file = self.root_path / ".organization_gitignore"
        with open(gitignore_file, 'w', encoding='utf-8') as f:
            f.write(gitignore_content)
        
        print("  ‚úÖ Archivos de configuraci√≥n creados")
    
    def setup_scripts(self):
        """Configura los scripts"""
        print("üîß Configurando scripts...")
        
        scripts_dir = self.root_path / "scripts"
        scripts_dir.mkdir(exist_ok=True)
        
        # Hacer scripts ejecutables
        script_files = [
            "organize_project.py",
            "maintain_project.py",
            "setup_project.py"
        ]
        
        for script_file in script_files:
            script_path = scripts_dir / script_file
            if script_path.exists():
                os.chmod(script_path, 0o755)
        
        print("  ‚úÖ Scripts configurados")
    
    def create_index_files(self):
        """Crea archivos √≠ndice"""
        print("üìù Creando archivos √≠ndice...")
        
        self.organizer.create_index_files()
        print("  ‚úÖ Archivos √≠ndice creados")
    
    def organize_existing_files(self):
        """Organiza archivos existentes"""
        print("üìÅ Organizando archivos existentes...")
        
        results = self.organizer.organize_files()
        print(f"  ‚úÖ {results['organized']} archivos organizados")
    
    def create_master_index(self):
        """Crea √≠ndice maestro del proyecto"""
        print("üìö Creando √≠ndice maestro...")
        
        master_index = f"""# üèóÔ∏è √çNDICE MAESTRO DEL PROYECTO FRONTIER

## üìã DESCRIPCI√ìN GENERAL

Este es el √≠ndice maestro del proyecto Frontier, un sistema integral de IA Marketing que combina tecnolog√≠as avanzadas con estrategias de marketing innovadoras.

## üèóÔ∏è ESTRUCTURA ORGANIZACIONAL

### üìö **CATEGOR√çAS PRINCIPALES**

"""
        
        for category_id, category_info in self.organizer.config["categories"].items():
            master_index += f"#### {category_id}: {category_info['name']}\n"
            master_index += f"**Descripci√≥n**: {category_info['description']}\n"
            master_index += f"**Subcategor√≠as**: {len(category_info['subcategories'])}\n\n"
        
        master_index += f"""
## üõ†Ô∏è HERRAMIENTAS DE ORGANIZACI√ìN

### üìù **Scripts Disponibles**
- **`organize_project.py`**: Organizaci√≥n autom√°tica de archivos
- **`maintain_project.py`**: Mantenimiento autom√°tico del proyecto
- **`setup_project.py`**: Configuraci√≥n inicial del proyecto

### üîß **Comandos √ötiles**
```bash
# Organizar archivos
python3 scripts/organize_project.py --mode organize

# Verificar organizaci√≥n
python3 scripts/organize_project.py --mode verify

# Mantenimiento diario
python3 scripts/maintain_project.py --mode daily

# Mantenimiento semanal
python3 scripts/maintain_project.py --mode weekly

# Mantenimiento mensual
python3 scripts/maintain_project.py --mode monthly
```

## üìä **M√âTRICAS DEL PROYECTO**

- **Categor√≠as principales**: {len(self.organizer.config['categories'])}
- **Subcategor√≠as totales**: {sum(len(cat['subcategories']) for cat in self.organizer.config['categories'].values())}
- **Tipos de archivo soportados**: {len(self.organizer.config['settings']['file_types'])}
- **Versi√≥n del sistema**: {self.organizer.config['version']}

## üöÄ **PR√ìXIMOS PASOS**

1. **Explorar categor√≠as** para familiarizarse con la estructura
2. **Ejecutar organizaci√≥n** para archivos nuevos
3. **Configurar mantenimiento** autom√°tico
4. **Personalizar configuraci√≥n** seg√∫n necesidades

## üìû **SOPORTE**

- **Documentaci√≥n**: READMEs en cada categor√≠a
- **Logs**: Directorio `logs/` para registros del sistema
- **Configuraci√≥n**: Archivo `organization_config.json`
- **Reportes**: Archivos de reporte generados autom√°ticamente

---
*√öltima actualizaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
*Versi√≥n: {self.organizer.config['version']}*
*Mantenido por: Sistema de Organizaci√≥n Permanente*
"""
        
        master_index_file = self.root_path / "PROJECT_MASTER_INDEX.md"
        with open(master_index_file, 'w', encoding='utf-8') as f:
            f.write(master_index)
        
        print(f"  ‚úÖ √çndice maestro creado: {master_index_file}")
    
    def generate_setup_report(self):
        """Genera reporte de configuraci√≥n"""
        print("üìä Generando reporte de configuraci√≥n...")
        
        report = f"""# üìã REPORTE DE CONFIGURACI√ìN INICIAL
**Proyecto**: Frontier  
**Fecha**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**Versi√≥n**: {self.organizer.config['version']}

## üèóÔ∏è ESTRUCTURA CONFIGURADA

### Categor√≠as Principales
"""
        
        for category_id, category_info in self.organizer.config["categories"].items():
            report += f"#### {category_id}: {category_info['name']}\n"
            report += f"**Descripci√≥n**: {category_info['description']}\n"
            report += f"**Subcategor√≠as**: {len(category_info['subcategories'])}\n"
            report += f"**Patrones de archivo**: {len(category_info['file_patterns'])}\n\n"
        
        report += f"""
## ‚öôÔ∏è CONFIGURACI√ìN

### Configuraci√≥n General
- **Organizaci√≥n autom√°tica**: {'‚úÖ' if self.organizer.config['settings']['auto_organize'] else '‚ùå'}
- **Crear archivos √≠ndice**: {'‚úÖ' if self.organizer.config['settings']['create_index_files'] else '‚ùå'}
- **Verificar organizaci√≥n**: {'‚úÖ' if self.organizer.config['settings']['verify_organization'] else '‚ùå'}
- **Umbral de confianza**: {self.organizer.config['settings']['confidence_threshold']}
- **Umbral de organizaci√≥n**: {self.organizer.config['settings']['organization_threshold']}/100

### Tipos de archivo soportados
{', '.join(self.organizer.config['settings']['file_types'])}

### Patrones excluidos
{', '.join(self.organizer.config['settings']['exclude_patterns'])}

## üöÄ PR√ìXIMOS PASOS

1. **Ejecutar organizaci√≥n inicial**: `python3 scripts/organize_project.py --mode organize`
2. **Verificar organizaci√≥n**: `python3 scripts/organize_project.py --mode verify`
3. **Configurar mantenimiento**: `python3 scripts/maintain_project.py --mode schedule`
4. **Revisar reportes**: Consultar archivos de reporte generados

## üìä M√âTRICAS DE CONFIGURACI√ìN

- **Total de categor√≠as**: {len(self.organizer.config['categories'])}
- **Total de subcategor√≠as**: {sum(len(cat['subcategories']) for cat in self.organizer.config['categories'].values())}
- **Patrones de archivo**: {sum(len(cat['file_patterns']) for cat in self.organizer.config['categories'].values())}
- **Configuraci√≥n completa**: ‚úÖ

---
*Reporte generado autom√°ticamente por el Sistema de Configuraci√≥n Inicial*
"""
        
        report_file = self.root_path / "SETUP_REPORT.md"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"  ‚úÖ Reporte guardado en: {report_file}")

def main():
    """Funci√≥n principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Configurador del Proyecto Frontier')
    parser.add_argument('--mode', choices=['setup', 'index', 'report'], 
                       default='setup', help='Modo de ejecuci√≥n')
    parser.add_argument('--root', default='/Users/adan/frontier', 
                       help='Ruta ra√≠z del proyecto')
    
    args = parser.parse_args()
    
    setup = ProjectSetup(args.root)
    
    if args.mode == 'setup':
        setup.setup_initial_organization()
        setup.create_master_index()
        setup.generate_setup_report()
    elif args.mode == 'index':
        setup.create_master_index()
    elif args.mode == 'report':
        setup.generate_setup_report()

if __name__ == "__main__":
    main()
