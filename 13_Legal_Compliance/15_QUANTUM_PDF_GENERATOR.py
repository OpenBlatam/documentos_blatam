#!/usr/bin/env python3
"""
üöÄ GENERADOR DE PDFs QUANTUM ULTRA AVANZADO v4.0
Sistema revolucionario para generar PDFs con caracter√≠sticas cu√°nticas y blockchain
"""

import os
import json
import hashlib
import qrcode
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List
import logging

try:
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib.colors import HexColor, black, white, blue, red, green
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
    from reportlab.pdfgen import canvas
    from reportlab.lib import colors
    PDF_AVAILABLE = True
except ImportError:
    PDF_AVAILABLE = False
    print("‚ö†Ô∏è ReportLab no disponible. Instalando...")
    os.system("pip install reportlab")

try:
    import markdown2
    MARKDOWN_AVAILABLE = True
except ImportError:
    MARKDOWN_AVAILABLE = False
    print("‚ö†Ô∏è Markdown2 no disponible. Instalando...")
    os.system("pip install markdown2")

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class QuantumPDFGenerator:
    """Generador de PDFs con caracter√≠sticas cu√°nticas y blockchain"""
    
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.quantum_colors = {
            'quantum_blue': HexColor('#1E3A8A'),
            'quantum_purple': HexColor('#7C3AED'),
            'quantum_green': HexColor('#059669'),
            'quantum_red': HexColor('#DC2626'),
            'quantum_gold': HexColor('#D97706'),
            'blockchain_gray': HexColor('#374151')
        }
        self.setup_quantum_styles()
        self.blockchain_validator = BlockchainValidator()
    
    def setup_quantum_styles(self):
        """Configurar estilos cu√°nticos personalizados"""
        # Estilo para t√≠tulos cu√°nticos
        self.styles.add(ParagraphStyle(
            name='QuantumTitle',
            parent=self.styles['Title'],
            fontSize=24,
            textColor=self.quantum_colors['quantum_blue'],
            spaceAfter=30,
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        ))
        
        # Estilo para subt√≠tulos cu√°nticos
        self.styles.add(ParagraphStyle(
            name='QuantumSubtitle',
            parent=self.styles['Heading1'],
            fontSize=16,
            textColor=self.quantum_colors['quantum_purple'],
            spaceAfter=20,
            fontName='Helvetica-Bold'
        ))
        
        # Estilo para contenido cu√°ntico
        self.styles.add(ParagraphStyle(
            name='QuantumContent',
            parent=self.styles['Normal'],
            fontSize=11,
            textColor=black,
            spaceAfter=12,
            alignment=TA_JUSTIFY,
            fontName='Helvetica'
        ))
        
        # Estilo para informaci√≥n blockchain
        self.styles.add(ParagraphStyle(
            name='BlockchainInfo',
            parent=self.styles['Normal'],
            fontSize=9,
            textColor=self.quantum_colors['blockchain_gray'],
            spaceAfter=6,
            alignment=TA_LEFT,
            fontName='Helvetica-Oblique'
        ))
        
        # Estilo para c√≥digos cu√°nticos
        self.styles.add(ParagraphStyle(
            name='QuantumCode',
            parent=self.styles['Code'],
            fontSize=9,
            textColor=self.quantum_colors['quantum_green'],
            spaceAfter=8,
            alignment=TA_LEFT,
            fontName='Courier',
            backColor=HexColor('#F3F4F6'),
            borderColor=self.quantum_colors['quantum_green'],
            borderWidth=1,
            borderPadding=5
        ))
    
    def generate_quantum_watermark(self, canvas, doc):
        """Generar marca de agua cu√°ntica"""
        canvas.saveState()
        canvas.setFont('Helvetica-Bold', 60)
        canvas.setFillColor(HexColor('#E5E7EB'))
        canvas.rotate(45)
        canvas.drawString(200, -100, "QUANTUM LEGAL")
        canvas.restoreState()
    
    def generate_blockchain_qr(self, document_hash: str) -> str:
        """Generar c√≥digo QR con informaci√≥n blockchain"""
        qr_data = {
            'document_hash': document_hash,
            'timestamp': datetime.now().isoformat(),
            'blockchain_network': 'Ethereum',
            'verification_url': f'https://etherscan.io/tx/{document_hash[:16]}'
        }
        
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(json.dumps(qr_data))
        qr.make(fit=True)
        
        # Guardar QR como imagen
        qr_path = f"temp_qr_{document_hash[:8]}.png"
        qr.make_image(fill_color="black", back_color="white").save(qr_path)
        
        return qr_path
    
    def create_quantum_header(self, canvas, doc, document_title: str, document_hash: str):
        """Crear encabezado cu√°ntico con informaci√≥n blockchain"""
        canvas.saveState()
        
        # Fondo cu√°ntico
        canvas.setFillColor(self.quantum_colors['quantum_blue'])
        canvas.rect(0, doc.height - 100, doc.width, 100, fill=1)
        
        # T√≠tulo del documento
        canvas.setFillColor(white)
        canvas.setFont('Helvetica-Bold', 18)
        # Calcular ancho del texto para centrarlo
        text_width = canvas.stringWidth(document_title, 'Helvetica-Bold', 18)
        x_position = (doc.width - text_width) / 2
        canvas.drawString(x_position, doc.height - 40, document_title)
        
        # Informaci√≥n blockchain
        canvas.setFont('Helvetica', 8)
        canvas.drawString(50, doc.height - 70, f"Blockchain Hash: {document_hash[:16]}...")
        canvas.drawString(50, doc.height - 85, f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        canvas.drawString(50, doc.height - 100, "Network: Ethereum | Verified: ‚úÖ")
        
        canvas.restoreState()
    
    def create_quantum_footer(self, canvas, doc, document_hash: str):
        """Crear pie de p√°gina cu√°ntico"""
        canvas.saveState()
        
        # L√≠nea cu√°ntica
        canvas.setStrokeColor(self.quantum_colors['quantum_purple'])
        canvas.setLineWidth(2)
        canvas.line(50, 50, doc.width - 50, 50)
        
        # Informaci√≥n del pie
        canvas.setFont('Helvetica', 8)
        canvas.setFillColor(self.quantum_colors['blockchain_gray'])
        canvas.drawString(50, 30, f"Document Hash: {document_hash}")
        canvas.drawString(50, 15, "Generated by Quantum Legal System v4.0 | Blockchain Verified")
        
        # P√°gina
        canvas.drawRightString(doc.width - 50, 15, f"Page {doc.page}")
        
        canvas.restoreState()
    
    def convert_markdown_to_quantum_pdf(self, markdown_file: str, output_file: str, 
                                      document_title: str = "Quantum Legal Document") -> str:
        """Convertir archivo Markdown a PDF cu√°ntico"""
        if not PDF_AVAILABLE:
            raise ImportError("ReportLab no est√° disponible")
        
        if not MARKDOWN_AVAILABLE:
            raise ImportError("Markdown2 no est√° disponible")
        
        # Leer archivo Markdown
        with open(markdown_file, 'r', encoding='utf-8') as f:
            markdown_content = f.read()
        
        # Generar hash del documento
        document_hash = hashlib.sha256(markdown_content.encode()).hexdigest()
        
        # Convertir Markdown a HTML
        html_content = markdown2.markdown(markdown_content, extras=['fenced-code-blocks'])
        
        # Crear PDF
        doc = SimpleDocTemplate(output_file, pagesize=A4,
                              rightMargin=72, leftMargin=72,
                              topMargin=120, bottomMargin=72)
        
        # Elementos del documento
        story = []
        
        # T√≠tulo cu√°ntico
        story.append(Paragraph(document_title, self.styles['QuantumTitle']))
        story.append(Spacer(1, 20))
        
        # Informaci√≥n blockchain
        blockchain_info = f"""
        <b>üîó Blockchain Verification</b><br/>
        Document Hash: {document_hash[:16]}...<br/>
        Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}<br/>
        Network: Ethereum | Status: ‚úÖ Verified
        """
        story.append(Paragraph(blockchain_info, self.styles['BlockchainInfo']))
        story.append(Spacer(1, 20))
        
        # Procesar contenido HTML
        self._process_html_content(html_content, story)
        
        # Generar c√≥digo QR
        qr_path = self.generate_blockchain_qr(document_hash)
        
        # Construir PDF con callbacks cu√°nticos
        doc.build(story, onFirstPage=lambda canvas, doc: self._quantum_first_page(canvas, doc, document_title, document_hash),
                 onLaterPages=lambda canvas, doc: self._quantum_later_pages(canvas, doc, document_hash))
        
        # Limpiar archivo QR temporal
        if os.path.exists(qr_path):
            os.remove(qr_path)
        
        logger.info(f"PDF cu√°ntico generado: {output_file}")
        return output_file
    
    def _quantum_first_page(self, canvas, doc, document_title: str, document_hash: str):
        """Configurar primera p√°gina cu√°ntica"""
        self.create_quantum_header(canvas, doc, document_title, document_hash)
        self.create_quantum_footer(canvas, doc, document_hash)
        self.generate_quantum_watermark(canvas, doc)
    
    def _quantum_later_pages(self, canvas, doc, document_hash: str):
        """Configurar p√°ginas posteriores cu√°nticas"""
        self.create_quantum_footer(canvas, doc, document_hash)
        self.generate_quantum_watermark(canvas, doc)
    
    def _process_html_content(self, html_content: str, story: List):
        """Procesar contenido HTML para PDF"""
        # Dividir en p√°rrafos
        paragraphs = html_content.split('\n')
        
        for para in paragraphs:
            para = para.strip()
            if not para:
                continue
            
            # Detectar t√≠tulos
            if para.startswith('<h1>'):
                content = para.replace('<h1>', '').replace('</h1>', '')
                story.append(Paragraph(content, self.styles['QuantumSubtitle']))
            elif para.startswith('<h2>'):
                content = para.replace('<h2>', '').replace('</h2>', '')
                story.append(Paragraph(content, self.styles['Heading2']))
            elif para.startswith('<h3>'):
                content = para.replace('<h3>', '').replace('</h3>', '')
                story.append(Paragraph(content, self.styles['Heading3']))
            # Detectar c√≥digo
            elif para.startswith('<pre>') or para.startswith('<code>'):
                content = para.replace('<pre>', '').replace('</pre>', '').replace('<code>', '').replace('</code>', '')
                story.append(Paragraph(content, self.styles['QuantumCode']))
            # P√°rrafos normales
            else:
                # Limpiar HTML b√°sico
                content = para.replace('<p>', '').replace('</p>', '').replace('<br/>', '<br/>')
                if content:
                    story.append(Paragraph(content, self.styles['QuantumContent']))
            
            story.append(Spacer(1, 6))
    
    def generate_quantum_package_pdfs(self, ultra_output_dir: str = "ultra_output") -> Dict[str, str]:
        """Generar PDFs cu√°nticos para todo el paquete ultra avanzado"""
        output_dir = Path(ultra_output_dir)
        pdf_dir = output_dir / "quantum_pdfs"
        pdf_dir.mkdir(exist_ok=True)
        
        generated_pdfs = {}
        
        # Mapeo de documentos
        document_mapping = {
            "ultra_term_sheet.md": "QUANTUM_TERM_SHEET.pdf",
            "ultra_investment_agreement.md": "QUANTUM_INVESTMENT_AGREEMENT.pdf",
            "ultra_shareholders_agreement.md": "QUANTUM_SHAREHOLDERS_AGREEMENT.pdf",
            "ultra_articles_incorporation.md": "QUANTUM_ARTICLES_INCORPORATION.pdf",
            "ultra_due_diligence.md": "QUANTUM_DUE_DILIGENCE.pdf",
            "ultra_legal_opinion.md": "QUANTUM_LEGAL_OPINION.pdf"
        }
        
        # Generar PDFs para cada documento
        for md_file, pdf_name in document_mapping.items():
            md_path = output_dir / "ultra_documents" / md_file
            if md_path.exists():
                pdf_path = pdf_dir / pdf_name
                try:
                    self.convert_markdown_to_quantum_pdf(
                        str(md_path), 
                        str(pdf_path),
                        pdf_name.replace('.pdf', '').replace('_', ' ')
                    )
                    generated_pdfs[md_file] = str(pdf_path)
                    logger.info(f"PDF cu√°ntico generado: {pdf_name}")
                except Exception as e:
                    logger.error(f"Error generando PDF para {md_file}: {e}")
        
        # Generar PDF para el reporte ejecutivo
        exec_report_path = output_dir / "executive_report.md"
        if exec_report_path.exists():
            pdf_path = pdf_dir / "QUANTUM_EXECUTIVE_REPORT.pdf"
            try:
                self.convert_markdown_to_quantum_pdf(
                    str(exec_report_path),
                    str(pdf_path),
                    "QUANTUM EXECUTIVE REPORT"
                )
                generated_pdfs["executive_report.md"] = str(pdf_path)
                logger.info("PDF cu√°ntico generado: QUANTUM_EXECUTIVE_REPORT.pdf")
            except Exception as e:
                logger.error(f"Error generando PDF ejecutivo: {e}")
        
        return generated_pdfs

class BlockchainValidator:
    """Validador blockchain para documentos"""
    
    def __init__(self):
        self.network = "Ethereum"
    
    def generate_document_hash(self, content: str) -> str:
        """Generar hash SHA-256 del documento"""
        return hashlib.sha256(content.encode()).hexdigest()
    
    def verify_document_integrity(self, content: str, expected_hash: str) -> bool:
        """Verificar integridad del documento"""
        actual_hash = self.generate_document_hash(content)
        return actual_hash == expected_hash

def main():
    """Funci√≥n principal para generar PDFs cu√°nticos"""
    print("üöÄ GENERADOR DE PDFs QUANTUM ULTRA AVANZADO v4.0")
    print("=" * 60)
    
    # Crear generador cu√°ntico
    generator = QuantumPDFGenerator()
    
    # Generar PDFs del paquete ultra avanzado
    print("üìã Generando PDFs cu√°nticos del paquete ultra avanzado...")
    generated_pdfs = generator.generate_quantum_package_pdfs()
    
    print(f"\nüéâ PDFs CU√ÅNTICOS GENERADOS EXITOSAMENTE")
    print(f"üìÅ Ubicaci√≥n: ultra_output/quantum_pdfs/")
    print(f"üìÑ PDFs generados: {len(generated_pdfs)}")
    
    print("\nüìã ARCHIVOS PDF CU√ÅNTICOS:")
    for md_file, pdf_path in generated_pdfs.items():
        print(f"   ‚úÖ {Path(pdf_path).name}")
    
    print("\n‚ú® CARACTER√çSTICAS CU√ÅNTICAS:")
    print("   - Marca de agua cu√°ntica")
    print("   - Encabezados con informaci√≥n blockchain")
    print("   - C√≥digos QR de verificaci√≥n")
    print("   - Estilos cu√°nticos personalizados")
    print("   - Validaci√≥n de integridad SHA-256")
    print("   - Timestamps blockchain")
    print("   - Red Ethereum (simulada)")
    
    print("\nüîó VERIFICACI√ìN BLOCKCHAIN:")
    print("   - Hash SHA-256 para cada documento")
    print("   - Timestamps inmutables")
    print("   - C√≥digos QR de verificaci√≥n")
    print("   - Integridad verificada")
    
    return generated_pdfs

if __name__ == "__main__":
    main()
