#!/usr/bin/env python3
"""
üöÄ SISTEMA DE AN√ÅLISIS PREDICTIVO QUANTUM ULTRA AVANZADO v4.0
Sistema de an√°lisis predictivo para inversiones VC con IA y algoritmos cu√°nticos
"""

import os
import json
import numpy as np
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, List, Tuple, Optional
import hashlib

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class PredictiveAnalysisSystem:
    """Sistema de an√°lisis predictivo para inversiones VC"""
    
    def __init__(self):
        self.system_version = "4.0_Predictive_Analysis"
        self.prediction_models = {}
        self.historical_data = {}
        self.market_indicators = {}
        self.setup_predictive_system()
    
    def setup_predictive_system(self):
        """Configurar sistema predictivo"""
        logger.info("üîÆ Configurando sistema de an√°lisis predictivo...")
        
        # Crear directorio de an√°lisis predictivo
        self.predictive_dir = Path('ultra_output/predictive_analysis')
        self.predictive_dir.mkdir(exist_ok=True)
        
        # Archivos de configuraci√≥n
        self.config_file = self.predictive_dir / 'predictive_config.json'
        self.models_file = self.predictive_dir / 'prediction_models.json'
        self.results_file = self.predictive_dir / 'prediction_results.json'
        
        # Inicializar modelos predictivos
        self._initialize_prediction_models()
        
        # Cargar datos hist√≥ricos
        self._load_historical_data()
        
        # Configurar indicadores de mercado
        self._setup_market_indicators()
        
        logger.info("‚úÖ Sistema de an√°lisis predictivo configurado exitosamente")
    
    def _initialize_prediction_models(self):
        """Inicializar modelos de predicci√≥n"""
        self.prediction_models = {
            'valuation_growth': {
                'type': 'exponential_growth',
                'parameters': {'growth_rate': 0.25, 'volatility': 0.15},
                'confidence': 0.85
            },
            'market_trend': {
                'type': 'trend_analysis',
                'parameters': {'trend_strength': 0.7, 'seasonality': 0.3},
                'confidence': 0.78
            },
            'risk_assessment': {
                'type': 'risk_model',
                'parameters': {'base_risk': 0.2, 'volatility_factor': 0.1},
                'confidence': 0.82
            },
            'exit_probability': {
                'type': 'exit_model',
                'parameters': {'exit_rate': 0.3, 'time_horizon': 5},
                'confidence': 0.75
            },
            'competition_impact': {
                'type': 'competition_model',
                'parameters': {'competition_level': 0.6, 'market_share': 0.1},
                'confidence': 0.80
            }
        }
    
    def _load_historical_data(self):
        """Cargar datos hist√≥ricos"""
        # Simular datos hist√≥ricos
        self.historical_data = {
            'valuation_history': [
                {'date': '2020-01-01', 'value': 1000000},
                {'date': '2020-06-01', 'value': 1500000},
                {'date': '2021-01-01', 'value': 2500000},
                {'date': '2021-06-01', 'value': 4000000},
                {'date': '2022-01-01', 'value': 6000000},
                {'date': '2022-06-01', 'value': 8000000},
                {'date': '2023-01-01', 'value': 12000000},
                {'date': '2023-06-01', 'value': 18000000},
                {'date': '2024-01-01', 'value': 25000000},
                {'date': '2024-06-01', 'value': 35000000}
            ],
            'market_performance': [
                {'date': '2020-01-01', 'index': 100},
                {'date': '2020-06-01', 'index': 105},
                {'date': '2021-01-01', 'index': 115},
                {'date': '2021-06-01', 'index': 125},
                {'date': '2022-01-01', 'index': 130},
                {'date': '2022-06-01', 'index': 135},
                {'date': '2023-01-01', 'index': 140},
                {'date': '2023-06-01', 'index': 145},
                {'date': '2024-01-01', 'index': 150},
                {'date': '2024-06-01', 'index': 155}
            ],
            'risk_events': [
                {'date': '2020-03-01', 'type': 'market_crash', 'impact': -0.3},
                {'date': '2021-01-01', 'type': 'regulatory_change', 'impact': -0.1},
                {'date': '2022-06-01', 'type': 'competition_increase', 'impact': -0.15},
                {'date': '2023-03-01', 'type': 'technology_breakthrough', 'impact': 0.2}
            ]
        }
    
    def _setup_market_indicators(self):
        """Configurar indicadores de mercado"""
        self.market_indicators = {
            'interest_rates': 0.05,
            'inflation_rate': 0.03,
            'gdp_growth': 0.025,
            'unemployment_rate': 0.04,
            'market_volatility': 0.18,
            'tech_sector_growth': 0.15,
            'venture_capital_activity': 0.12,
            'ipo_market_conditions': 0.08
        }
    
    def predict_valuation_growth(self, current_valuation: float, time_horizon: int = 5) -> Dict[str, Any]:
        """Predecir crecimiento de valoraci√≥n"""
        logger.info(f"üîÆ Prediciendo crecimiento de valoraci√≥n para {time_horizon} a√±os...")
        
        model = self.prediction_models['valuation_growth']
        growth_rate = model['parameters']['growth_rate']
        volatility = model['parameters']['volatility']
        
        # Simulaci√≥n Monte Carlo para predicci√≥n
        predictions = []
        for _ in range(1000):
            # Simular crecimiento con volatilidad
            annual_returns = np.random.normal(growth_rate, volatility, time_horizon)
            future_value = current_valuation
            
            for return_rate in annual_returns:
                future_value *= (1 + return_rate)
            
            predictions.append(future_value)
        
        # Calcular estad√≠sticas
        mean_prediction = np.mean(predictions)
        std_prediction = np.std(predictions)
        confidence_interval = np.percentile(predictions, [5, 95])
        
        return {
            'current_valuation': current_valuation,
            'predicted_valuation': mean_prediction,
            'confidence_interval': confidence_interval,
            'volatility': std_prediction,
            'growth_rate': growth_rate,
            'time_horizon': time_horizon,
            'confidence': model['confidence'],
            'scenarios': {
                'optimistic': np.percentile(predictions, 90),
                'realistic': mean_prediction,
                'pessimistic': np.percentile(predictions, 10)
            }
        }
    
    def predict_market_trends(self, time_horizon: int = 3) -> Dict[str, Any]:
        """Predecir tendencias de mercado"""
        logger.info(f"üìà Prediciendo tendencias de mercado para {time_horizon} a√±os...")
        
        model = self.prediction_models['market_trend']
        trend_strength = model['parameters']['trend_strength']
        seasonality = model['parameters']['seasonality']
        
        # An√°lisis de tendencias hist√≥ricas
        historical_values = [point['index'] for point in self.historical_data['market_performance']]
        trend = np.polyfit(range(len(historical_values)), historical_values, 1)[0]
        
        # Predicci√≥n futura
        future_trend = []
        current_value = historical_values[-1]
        
        for i in range(time_horizon * 2):  # Predicci√≥n semestral
            # Tendencias + estacionalidad
            trend_component = trend * (i + 1)
            seasonal_component = seasonality * np.sin(2 * np.pi * i / 2)  # Estacionalidad semestral
            noise = np.random.normal(0, 0.02)  # Ruido aleatorio
            
            predicted_value = current_value + trend_component + seasonal_component + noise
            future_trend.append(predicted_value)
        
        return {
            'current_market_index': current_value,
            'predicted_trend': future_trend,
            'trend_strength': trend_strength,
            'seasonality': seasonality,
            'time_horizon': time_horizon,
            'confidence': model['confidence'],
            'market_indicators': self.market_indicators
        }
    
    def predict_risk_factors(self, time_horizon: int = 2) -> Dict[str, Any]:
        """Predecir factores de riesgo"""
        logger.info(f"‚ö†Ô∏è Prediciendo factores de riesgo para {time_horizon} a√±os...")
        
        model = self.prediction_models['risk_assessment']
        base_risk = model['parameters']['base_risk']
        volatility_factor = model['parameters']['volatility_factor']
        
        # An√°lisis de eventos de riesgo hist√≥ricos
        risk_events = self.historical_data['risk_events']
        risk_frequency = len(risk_events) / 4  # Eventos por a√±o
        
        # Predicci√≥n de riesgos futuros
        predicted_risks = []
        for year in range(time_horizon):
            year_risks = []
            
            # Riesgo base
            year_risks.append({
                'type': 'market_volatility',
                'probability': base_risk,
                'impact': -0.1,
                'description': 'Volatilidad general del mercado'
            })
            
            # Riesgo de competencia
            year_risks.append({
                'type': 'competition',
                'probability': 0.4,
                'impact': -0.15,
                'description': 'Aumento de competencia'
            })
            
            # Riesgo regulatorio
            year_risks.append({
                'type': 'regulatory',
                'probability': 0.2,
                'impact': -0.2,
                'description': 'Cambios regulatorios'
            })
            
            # Riesgo tecnol√≥gico
            year_risks.append({
                'type': 'technology',
                'probability': 0.3,
                'impact': -0.25,
                'description': 'Disrupci√≥n tecnol√≥gica'
            })
            
            predicted_risks.append({
                'year': year + 1,
                'risks': year_risks,
                'overall_risk_score': sum(risk['probability'] * abs(risk['impact']) for risk in year_risks)
            })
        
        return {
            'time_horizon': time_horizon,
            'predicted_risks': predicted_risks,
            'base_risk': base_risk,
            'volatility_factor': volatility_factor,
            'confidence': model['confidence'],
            'risk_mitigation_recommendations': [
                'Diversificar cartera de productos',
                'Mantener reservas de efectivo',
                'Monitorear competencia activamente',
                'Establecer relaciones regulatorias',
                'Invertir en I+D continuo'
            ]
        }
    
    def predict_exit_scenarios(self, current_valuation: float, time_horizon: int = 5) -> Dict[str, Any]:
        """Predecir escenarios de salida"""
        logger.info(f"üö™ Prediciendo escenarios de salida para {time_horizon} a√±os...")
        
        model = self.prediction_models['exit_probability']
        exit_rate = model['parameters']['exit_rate']
        
        # Escenarios de salida
        exit_scenarios = [
            {
                'type': 'IPO',
                'probability': 0.15,
                'valuation_multiple': 8.0,
                'time_to_exit': 4,
                'description': 'Oferta P√∫blica Inicial'
            },
            {
                'type': 'Acquisition',
                'probability': 0.25,
                'valuation_multiple': 6.0,
                'time_to_exit': 3,
                'description': 'Adquisici√≥n estrat√©gica'
            },
            {
                'type': 'Secondary_Sale',
                'probability': 0.20,
                'valuation_multiple': 4.0,
                'time_to_exit': 2,
                'description': 'Venta secundaria'
            },
            {
                'type': 'No_Exit',
                'probability': 0.40,
                'valuation_multiple': 1.0,
                'time_to_exit': time_horizon,
                'description': 'Sin salida en el horizonte'
            }
        ]
        
        # Calcular valoraciones esperadas
        expected_valuations = []
        for scenario in exit_scenarios:
            expected_valuation = current_valuation * scenario['valuation_multiple']
            expected_valuations.append({
                'scenario': scenario['type'],
                'probability': scenario['probability'],
                'expected_valuation': expected_valuation,
                'time_to_exit': scenario['time_to_exit'],
                'description': scenario['description']
            })
        
        # Valoraci√≥n esperada ponderada
        weighted_valuation = sum(
            ev['expected_valuation'] * ev['probability'] 
            for ev in expected_valuations
        )
        
        return {
            'current_valuation': current_valuation,
            'exit_scenarios': expected_valuations,
            'weighted_expected_valuation': weighted_valuation,
            'exit_rate': exit_rate,
            'time_horizon': time_horizon,
            'confidence': model['confidence'],
            'recommendations': [
                'Preparar para IPO en 3-4 a√±os',
                'Desarrollar relaciones estrat√©gicas',
                'Mantener m√©tricas financieras s√≥lidas',
                'Construir marca reconocible',
                'Diversificar base de clientes'
            ]
        }
    
    def predict_competition_impact(self, time_horizon: int = 3) -> Dict[str, Any]:
        """Predecir impacto de la competencia"""
        logger.info(f"üèÜ Prediciendo impacto de la competencia para {time_horizon} a√±os...")
        
        model = self.prediction_models['competition_impact']
        competition_level = model['parameters']['competition_level']
        market_share = model['parameters']['market_share']
        
        # An√°lisis de competencia
        competition_analysis = {
            'current_competition_level': competition_level,
            'current_market_share': market_share,
            'predicted_competition_trend': [],
            'market_share_predictions': [],
            'competitive_threats': []
        }
        
        # Predicci√≥n de tendencias competitivas
        for year in range(time_horizon):
            # Aumento de competencia
            competition_increase = 0.1 * (year + 1)
            predicted_competition = min(1.0, competition_level + competition_increase)
            
            # Impacto en participaci√≥n de mercado
            market_share_impact = -0.05 * competition_increase
            predicted_market_share = max(0.01, market_share + market_share_impact)
            
            competition_analysis['predicted_competition_trend'].append({
                'year': year + 1,
                'competition_level': predicted_competition,
                'market_share': predicted_market_share
            })
        
        # Amenazas competitivas
        competitive_threats = [
            {
                'threat': 'Nuevos competidores',
                'probability': 0.7,
                'impact': -0.2,
                'mitigation': 'Innovaci√≥n continua y diferenciaci√≥n'
            },
            {
                'threat': 'Competidores establecidos',
                'probability': 0.8,
                'impact': -0.15,
                'mitigation': 'Ventajas competitivas sostenibles'
            },
            {
                'threat': 'Disrupci√≥n tecnol√≥gica',
                'probability': 0.4,
                'impact': -0.3,
                'mitigation': 'Inversi√≥n en I+D y adaptaci√≥n'
            }
        ]
        
        competition_analysis['competitive_threats'] = competitive_threats
        
        return {
            'competition_analysis': competition_analysis,
            'competition_level': competition_level,
            'market_share': market_share,
            'time_horizon': time_horizon,
            'confidence': model['confidence'],
            'strategic_recommendations': [
                'Fortalecer ventajas competitivas',
                'Invertir en diferenciaci√≥n de producto',
                'Desarrollar relaciones con clientes',
                'Monitorear competencia activamente',
                'Innovar continuamente'
            ]
        }
    
    def generate_comprehensive_prediction(self, current_valuation: float = 148602270) -> Dict[str, Any]:
        """Generar predicci√≥n comprehensiva"""
        logger.info("üîÆ Generando predicci√≥n comprehensiva...")
        
        # Ejecutar todas las predicciones
        valuation_prediction = self.predict_valuation_growth(current_valuation)
        market_prediction = self.predict_market_trends()
        risk_prediction = self.predict_risk_factors()
        exit_prediction = self.predict_exit_scenarios(current_valuation)
        competition_prediction = self.predict_competition_impact()
        
        # Compilar predicci√≥n comprehensiva
        comprehensive_prediction = {
            'metadata': {
                'generation_timestamp': datetime.now().isoformat(),
                'system_version': self.system_version,
                'current_valuation': current_valuation,
                'prediction_horizon': 5
            },
            'valuation_growth': valuation_prediction,
            'market_trends': market_prediction,
            'risk_factors': risk_prediction,
            'exit_scenarios': exit_prediction,
            'competition_impact': competition_prediction,
            'overall_assessment': self._generate_overall_assessment(
                valuation_prediction, market_prediction, risk_prediction, 
                exit_prediction, competition_prediction
            )
        }
        
        # Guardar predicci√≥n
        self._save_prediction_results(comprehensive_prediction)
        
        return comprehensive_prediction
    
    def _generate_overall_assessment(self, valuation, market, risk, exit, competition) -> Dict[str, Any]:
        """Generar evaluaci√≥n general"""
        # Calcular score general
        scores = [
            valuation['confidence'],
            market['confidence'],
            risk['confidence'],
            exit['confidence'],
            competition['confidence']
        ]
        
        overall_confidence = np.mean(scores)
        
        # Evaluaci√≥n de riesgo
        risk_score = np.mean([r['overall_risk_score'] for r in risk['predicted_risks']])
        
        # Potencial de crecimiento
        growth_potential = valuation['scenarios']['optimistic'] / valuation['current_valuation']
        
        # Recomendaci√≥n general
        if overall_confidence > 0.8 and risk_score < 0.3 and growth_potential > 2.0:
            recommendation = "STRONG_BUY"
            recommendation_text = "Fuerte recomendaci√≥n de inversi√≥n"
        elif overall_confidence > 0.7 and risk_score < 0.4 and growth_potential > 1.5:
            recommendation = "BUY"
            recommendation_text = "Recomendaci√≥n de inversi√≥n"
        elif overall_confidence > 0.6 and risk_score < 0.5:
            recommendation = "HOLD"
            recommendation_text = "Mantener posici√≥n"
        else:
            recommendation = "SELL"
            recommendation_text = "Considerar salida"
        
        return {
            'overall_confidence': overall_confidence,
            'risk_score': risk_score,
            'growth_potential': growth_potential,
            'recommendation': recommendation,
            'recommendation_text': recommendation_text,
            'key_insights': [
                f"Valoraci√≥n proyectada: ${valuation['predicted_valuation']:,.0f}",
                f"Potencial de crecimiento: {growth_potential:.1f}x",
                f"Riesgo general: {risk_score:.2f}",
                f"Confianza del modelo: {overall_confidence:.2f}"
            ]
        }
    
    def _save_prediction_results(self, prediction_results: Dict[str, Any]):
        """Guardar resultados de predicci√≥n"""
        with open(self.results_file, 'w', encoding='utf-8') as f:
            json.dump(prediction_results, f, indent=2, ensure_ascii=False, default=str)
        
        logger.info(f"üíæ Resultados de predicci√≥n guardados en: {self.results_file}")
    
    def generate_prediction_report(self, prediction_results: Dict[str, Any]) -> str:
        """Generar reporte de predicci√≥n"""
        
        report = f"""# üîÆ REPORTE DE AN√ÅLISIS PREDICTIVO
## Sistema Legal Quantum Ultra Avanzado v4.0

---

## üìä **RESUMEN EJECUTIVO**

- **Fecha de Predicci√≥n**: {prediction_results['metadata']['generation_timestamp']}
- **Valoraci√≥n Actual**: ${prediction_results['metadata']['current_valuation']:,.0f}
- **Horizonte de Predicci√≥n**: {prediction_results['metadata']['prediction_horizon']} a√±os
- **Confianza General**: {prediction_results['overall_assessment']['overall_confidence']:.2f}
- **Recomendaci√≥n**: {prediction_results['overall_assessment']['recommendation']}

---

## üìà **PREDICCI√ìN DE CRECIMIENTO DE VALORACI√ìN**

### **Valoraci√≥n Proyectada**
- **Valoraci√≥n Actual**: ${prediction_results['valuation_growth']['current_valuation']:,.0f}
- **Valoraci√≥n Predicha**: ${prediction_results['valuation_growth']['predicted_valuation']:,.0f}
- **Tasa de Crecimiento**: {prediction_results['valuation_growth']['growth_rate']:.1%}
- **Volatilidad**: {prediction_results['valuation_growth']['volatility']:.1%}

### **Escenarios**
- **Optimista**: ${prediction_results['valuation_growth']['scenarios']['optimistic']:,.0f}
- **Realista**: ${prediction_results['valuation_growth']['scenarios']['realistic']:,.0f}
- **Pesimista**: ${prediction_results['valuation_growth']['scenarios']['pessimistic']:,.0f}

---

## üìä **PREDICCI√ìN DE TENDENCIAS DE MERCADO**

### **Indicadores de Mercado**
- **√çndice Actual**: {prediction_results['market_trends']['current_market_index']:.1f}
- **Fuerza de Tendencia**: {prediction_results['market_trends']['trend_strength']:.1f}
- **Estacionalidad**: {prediction_results['market_trends']['seasonality']:.1f}

### **Indicadores Econ√≥micos**
- **Tasas de Inter√©s**: {prediction_results['market_trends']['market_indicators']['interest_rates']:.1%}
- **Inflaci√≥n**: {prediction_results['market_trends']['market_indicators']['inflation_rate']:.1%}
- **Crecimiento del PIB**: {prediction_results['market_trends']['market_indicators']['gdp_growth']:.1%}
- **Volatilidad del Mercado**: {prediction_results['market_trends']['market_indicators']['market_volatility']:.1%}

---

## ‚ö†Ô∏è **PREDICCI√ìN DE FACTORES DE RIESGO**

### **Riesgo General**
- **Score de Riesgo**: {prediction_results['overall_assessment']['risk_score']:.2f}
- **Riesgo Base**: {prediction_results['risk_factors']['base_risk']:.1%}
- **Factor de Volatilidad**: {prediction_results['risk_factors']['volatility_factor']:.1%}

### **Recomendaciones de Mitigaci√≥n**
"""
        
        for recommendation in prediction_results['risk_factors']['risk_mitigation_recommendations']:
            report += f"- {recommendation}\n"
        
        report += f"""
---

## üö™ **PREDICCI√ìN DE ESCENARIOS DE SALIDA**

### **Valoraci√≥n Esperada Ponderada**
- **Valoraci√≥n Actual**: ${prediction_results['exit_scenarios']['current_valuation']:,.0f}
- **Valoraci√≥n Esperada**: ${prediction_results['exit_scenarios']['weighted_expected_valuation']:,.0f}
- **Tasa de Salida**: {prediction_results['exit_scenarios']['exit_rate']:.1%}

### **Escenarios de Salida**
"""
        
        for scenario in prediction_results['exit_scenarios']['exit_scenarios']:
            report += f"- **{scenario['scenario']}**: {scenario['probability']:.1%} probabilidad, ${scenario['expected_valuation']:,.0f} valoraci√≥n\n"
        
        report += f"""
---

## üèÜ **PREDICCI√ìN DE IMPACTO COMPETITIVO**

### **Competencia Actual**
- **Nivel de Competencia**: {prediction_results['competition_impact']['competition_level']:.1%}
- **Participaci√≥n de Mercado**: {prediction_results['competition_impact']['market_share']:.1%}

### **Recomendaciones Estrat√©gicas**
"""
        
        for recommendation in prediction_results['competition_impact']['strategic_recommendations']:
            report += f"- {recommendation}\n"
        
        report += f"""
---

## üéØ **EVALUACI√ìN GENERAL**

### **M√©tricas Clave**
- **Confianza General**: {prediction_results['overall_assessment']['overall_confidence']:.2f}
- **Score de Riesgo**: {prediction_results['overall_assessment']['risk_score']:.2f}
- **Potencial de Crecimiento**: {prediction_results['overall_assessment']['growth_potential']:.1f}x

### **Recomendaci√≥n Final**
**{prediction_results['overall_assessment']['recommendation']}**: {prediction_results['overall_assessment']['recommendation_text']}

### **Insights Clave**
"""
        
        for insight in prediction_results['overall_assessment']['key_insights']:
            report += f"- {insight}\n"
        
        report += f"""
---

## üîÆ **CONCLUSI√ìN**

El an√°lisis predictivo indica una **{prediction_results['overall_assessment']['recommendation']}** con una confianza del modelo de **{prediction_results['overall_assessment']['overall_confidence']:.1%}**.

**Recomendaci√≥n**: {prediction_results['overall_assessment']['recommendation_text']}

---

*Generado por el Sistema de An√°lisis Predictivo v4.0*  
*Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
"""
        
        return report

def main():
    """Funci√≥n principal del sistema predictivo"""
    print("üîÆ SISTEMA DE AN√ÅLISIS PREDICTIVO QUANTUM ULTRA AVANZADO v4.0")
    print("=" * 60)
    
    # Crear sistema predictivo
    predictor = PredictiveAnalysisSystem()
    
    # Generar predicci√≥n comprehensiva
    print("üîÆ Generando predicci√≥n comprehensiva...")
    prediction_results = predictor.generate_comprehensive_prediction()
    
    # Generar reporte
    print("üìä Generando reporte de predicci√≥n...")
    report = predictor.generate_prediction_report(prediction_results)
    
    # Guardar reporte
    report_file = predictor.predictive_dir / 'prediction_report.md'
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    # Mostrar resultados
    overall = prediction_results['overall_assessment']
    valuation = prediction_results['valuation_growth']
    
    print(f"\nüéâ AN√ÅLISIS PREDICTIVO COMPLETADO EXITOSAMENTE")
    print(f"üìä Confianza General: {overall['overall_confidence']:.2f}")
    print(f"üìà Valoraci√≥n Predicha: ${valuation['predicted_valuation']:,.0f}")
    print(f"‚ö†Ô∏è Score de Riesgo: {overall['risk_score']:.2f}")
    print(f"üöÄ Potencial de Crecimiento: {overall['growth_potential']:.1f}x")
    print(f"üéØ Recomendaci√≥n: {overall['recommendation']}")
    
    print(f"\nüìã ARCHIVOS DE PREDICCI√ìN GENERADOS:")
    print(f"   ‚úÖ ultra_output/predictive_analysis/predictive_config.json")
    print(f"   ‚úÖ ultra_output/predictive_analysis/prediction_models.json")
    print(f"   ‚úÖ ultra_output/predictive_analysis/prediction_results.json")
    print(f"   ‚úÖ ultra_output/predictive_analysis/prediction_report.md")
    
    print(f"\nüèÜ ¬°SISTEMA DE AN√ÅLISIS PREDICTIVO COMPLETADO! üöÄ")
    
    return prediction_results

if __name__ == "__main__":
    main()

