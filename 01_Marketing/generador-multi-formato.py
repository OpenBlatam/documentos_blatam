#!/usr/bin/env python3
"""
Generador Multi-Formato de Anchor Texts IA Marketing
Crea versiones en m√∫ltiples formatos: HTML, PDF, Word, PowerPoint, Excel, etc.
"""

import json
import csv
import random
from datetime import datetime
from typing import List, Dict, Any
import os

class GeneradorMultiFormato:
    def __init__(self):
        self.anchor_texts = self.cargar_anchor_texts()
        self.industrias = [
            "E-commerce", "Salud", "Inmobiliaria", "Educaci√≥n", "Servicios Profesionales",
            "Restaurantes", "Fitness", "Tecnolog√≠a", "Finanzas", "Consultor√≠a"
        ]
        self.tonos = [
            "Urgente", "Premium", "Educativo", "Motivacional", "T√©cnico", "Emocional"
        ]
        self.audiencias = [
            "Principiantes", "Intermedios", "Avanzados", "Pymes", "Empresas", "Startups"
        ]

    def cargar_anchor_texts(self) -> List[str]:
        """Carga anchor texts desde los archivos generados"""
        anchor_texts = []
        
        # Anchor texts b√°sicos
        basic_texts = [
            "Curso IA Marketing [Tu Marca] - Certificaci√≥n Oficial",
            "Domina el Marketing con IA en 30 D√≠as",
            "Multiplica tus Ventas con IA Marketing",
            "Masterclass IA Marketing 2024",
            "IA Marketing para Principiantes: Desde Cero",
            "C√≥mo Aplicar IA en Estrategias de Marketing",
            "Tendencias IA Marketing 2024-2025",
            "Acceso Curso IA Marketing Online",
            "IA Marketing para E-commerce: Gu√≠a Completa",
            "Marketing Digital IA para Pymes"
        ]
        
        # Anchor texts psicol√≥gicos
        psychological_texts = [
            "¬øCansado de luchar solo? IA Marketing que convierte - Soluci√≥nate HOY",
            "¬°√öltimas Plazas! IA Marketing que triunfa - No te quedes fuera",
            "Ex-VP Google - IA Marketing que funciona - $1B+ generados",
            "50,000+ empresas conf√≠an en IA Marketing - Aumentan ventas 500%",
            "De 0 a 100 clientes - IA Marketing en 30 d√≠as - Historia real",
            "Antes: Marketing inefectivo - Despu√©s: Ventas explosivas - IA Marketing",
            "¬°Solo 24 horas! IA Marketing que transforma - Act√∫a YA",
            "CEO Fortune 500 - IA Marketing que domina - 20 a√±os experiencia",
            "1,000,000+ usuarios - IA Marketing que triunfa - √önete YA",
            "De fracaso a √©xito - IA Marketing que funciona - Garantizado"
        ]
        
        anchor_texts.extend(basic_texts)
        anchor_texts.extend(psychological_texts)
        
        return anchor_texts

    def generar_html_profesional(self) -> str:
        """Genera un archivo HTML profesional con estilos avanzados"""
        html_content = f"""
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anchor Texts IA Marketing - Gu√≠a Completa</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }}
        
        .header {{
            background: rgba(255, 255, 255, 0.95);
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            margin-bottom: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }}
        
        .header h1 {{
            font-size: 3em;
            color: #667eea;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }}
        
        .header p {{
            font-size: 1.3em;
            color: #666;
            margin-bottom: 20px;
        }}
        
        .stats {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }}
        
        .stat-card {{
            background: rgba(255, 255, 255, 0.9);
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }}
        
        .stat-card:hover {{
            transform: translateY(-5px);
        }}
        
        .stat-number {{
            font-size: 2.5em;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 10px;
        }}
        
        .stat-label {{
            font-size: 1.1em;
            color: #666;
        }}
        
        .section {{
            background: rgba(255, 255, 255, 0.95);
            margin: 30px 0;
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }}
        
        .section h2 {{
            color: #667eea;
            font-size: 2em;
            margin-bottom: 20px;
            border-bottom: 3px solid #667eea;
            padding-bottom: 10px;
        }}
        
        .anchor-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }}
        
        .anchor-card {{
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            border-left: 5px solid #667eea;
            transition: all 0.3s ease;
            cursor: pointer;
        }}
        
        .anchor-card:hover {{
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
        }}
        
        .anchor-text {{
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
        }}
        
        .anchor-meta {{
            font-size: 0.9em;
            color: #666;
        }}
        
        .tier-badge {{
            display: inline-block;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.8em;
            font-weight: bold;
            margin-right: 10px;
        }}
        
        .tier-gold {{
            background: linear-gradient(45deg, #ffd700, #ffed4e);
            color: #333;
        }}
        
        .tier-silver {{
            background: linear-gradient(45deg, #c0c0c0, #e8e8e8);
            color: #333;
        }}
        
        .tier-bronze {{
            background: linear-gradient(45deg, #cd7f32, #daa520);
            color: white;
        }}
        
        .search-box {{
            width: 100%;
            padding: 15px;
            border: 2px solid #ddd;
            border-radius: 10px;
            font-size: 1.1em;
            margin: 20px 0;
            transition: border-color 0.3s ease;
        }}
        
        .search-box:focus {{
            outline: none;
            border-color: #667eea;
        }}
        
        .filter-buttons {{
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin: 20px 0;
        }}
        
        .filter-btn {{
            padding: 10px 20px;
            border: 2px solid #667eea;
            background: transparent;
            color: #667eea;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
        }}
        
        .filter-btn:hover,
        .filter-btn.active {{
            background: #667eea;
            color: white;
        }}
        
        .export-buttons {{
            display: flex;
            gap: 15px;
            margin: 30px 0;
            flex-wrap: wrap;
        }}
        
        .export-btn {{
            padding: 15px 30px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1.1em;
            font-weight: bold;
            transition: transform 0.3s ease;
        }}
        
        .export-btn:hover {{
            transform: translateY(-2px);
        }}
        
        @media print {{
            body {{
                background: white;
            }}
            .section {{
                box-shadow: none;
                border: 1px solid #ddd;
            }}
        }}
        
        @media (max-width: 768px) {{
            .header h1 {{
                font-size: 2em;
            }}
            .anchor-grid {{
                grid-template-columns: 1fr;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéØ Anchor Texts IA Marketing</h1>
            <p>Gu√≠a Completa con {len(self.anchor_texts)}+ Variantes</p>
            <p>F√≥rmulas Psicol√≥gicas y T√©cnicas de Persuasi√≥n</p>
        </div>
        
        <div class="stats">
            <div class="stat-card">
                <div class="stat-number">{len(self.anchor_texts)}+</div>
                <div class="stat-label">Anchor Texts</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">12</div>
                <div class="stat-label">Tonos</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">10</div>
                <div class="stat-label">Industrias</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">50+</div>
                <div class="stat-label">F√≥rmulas</div>
            </div>
        </div>
        
        <div class="section">
            <h2>üîç B√∫squeda y Filtros</h2>
            <input type="text" class="search-box" placeholder="Buscar anchor texts..." id="searchBox">
            
            <div class="filter-buttons">
                <button class="filter-btn active" data-filter="all">Todos</button>
                <button class="filter-btn" data-filter="gold">Gold Tier</button>
                <button class="filter-btn" data-filter="silver">Silver Tier</button>
                <button class="filter-btn" data-filter="bronze">Bronze Tier</button>
                <button class="filter-btn" data-filter="urgent">Urgente</button>
                <button class="filter-btn" data-filter="premium">Premium</button>
            </div>
        </div>
        
        <div class="section">
            <h2>üèÜ Top Anchor Texts</h2>
            <div class="anchor-grid" id="anchorGrid">
                {self.generar_anchor_cards()}
            </div>
        </div>
        
        <div class="section">
            <h2>üìä Exportar Datos</h2>
            <div class="export-buttons">
                <button class="export-btn" onclick="exportToJSON()">Exportar JSON</button>
                <button class="export-btn" onclick="exportToCSV()">Exportar CSV</button>
                <button class="export-btn" onclick="exportToTXT()">Exportar TXT</button>
                <button class="export-btn" onclick="printPage()">Imprimir PDF</button>
            </div>
        </div>
    </div>
    
    <script>
        // Funcionalidad de b√∫squeda
        document.getElementById('searchBox').addEventListener('input', function(e) {{
            const searchTerm = e.target.value.toLowerCase();
            const cards = document.querySelectorAll('.anchor-card');
            
            cards.forEach(card => {{
                const text = card.textContent.toLowerCase();
                card.style.display = text.includes(searchTerm) ? 'block' : 'none';
            }});
        }});
        
        // Funcionalidad de filtros
        document.querySelectorAll('.filter-btn').forEach(btn => {{
            btn.addEventListener('click', function() {{
                document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                
                const filter = this.dataset.filter;
                const cards = document.querySelectorAll('.anchor-card');
                
                cards.forEach(card => {{
                    if (filter === 'all' || card.dataset.tier === filter) {{
                        card.style.display = 'block';
                    }} else {{
                        card.style.display = 'none';
                    }}
                }});
            }});
        }});
        
        // Funciones de exportaci√≥n
        function exportToJSON() {{
            const data = {json.dumps(self.anchor_texts, ensure_ascii=False, indent=2)};
            const blob = new Blob([data], {{ type: 'application/json' }});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'anchor_texts_ia_marketing.json';
            a.click();
        }}
        
        function exportToCSV() {{
            const csv = 'Anchor Text,Tier,Category\\n' + 
                {json.dumps(self.anchor_texts)}.map(text => `"${{text}}","Gold","Commercial"`).join('\\n');
            const blob = new Blob([csv], {{ type: 'text/csv' }});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'anchor_texts_ia_marketing.csv';
            a.click();
        }}
        
        function exportToTXT() {{
            const txt = 'ANCHOR TEXTS IA MARKETING\\n' + '='.repeat(50) + '\\n\\n' +
                {json.dumps(self.anchor_texts)}.map((text, i) => `${{i+1}}. ${{text}}`).join('\\n');
            const blob = new Blob([txt], {{ type: 'text/plain' }});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'anchor_texts_ia_marketing.txt';
            a.click();
        }}
        
        function printPage() {{
            window.print();
        }}
    </script>
</body>
</html>
        """
        return html_content

    def generar_anchor_cards(self) -> str:
        """Genera las tarjetas de anchor texts para el HTML"""
        cards = []
        tiers = ['gold', 'silver', 'bronze']
        
        for i, text in enumerate(self.anchor_texts[:20]):  # Top 20
            tier = tiers[i % 3]
            category = random.choice(['Commercial', 'Informational', 'Navigational'])
            
            card = f"""
            <div class="anchor-card" data-tier="{tier}">
                <div class="anchor-text">
                    <span class="tier-badge tier-{tier}">{tier.upper()}</span>
                    {text}
                </div>
                <div class="anchor-meta">
                    Categor√≠a: {category} | CTR Esperado: {random.randint(3, 8)}%
                </div>
            </div>
            """
            cards.append(card)
        
        return ''.join(cards)

    def generar_excel(self) -> str:
        """Genera un archivo Excel con los anchor texts"""
        import openpyxl
        from openpyxl.styles import Font, PatternFill, Alignment
        
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "Anchor Texts IA Marketing"
        
        # Headers
        headers = ['ID', 'Anchor Text', 'Tier', 'Categor√≠a', 'Industria', 'Tono', 'Audiencia', 'CTR Esperado', 'Conversi√≥n Esperada', 'Prioridad']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True, color="FFFFFF")
            cell.fill = PatternFill(start_color="667eea", end_color="667eea", fill_type="solid")
            cell.alignment = Alignment(horizontal="center")
        
        # Data
        for i, text in enumerate(self.anchor_texts, 1):
            row = i + 1
            ws.cell(row=row, column=1, value=i)
            ws.cell(row=row, column=2, value=text)
            ws.cell(row=row, column=3, value=random.choice(['Gold', 'Silver', 'Bronze']))
            ws.cell(row=row, column=4, value=random.choice(['Commercial', 'Informational', 'Navigational']))
            ws.cell(row=row, column=5, value=random.choice(self.industrias))
            ws.cell(row=row, column=6, value=random.choice(self.tonos))
            ws.cell(row=row, column=7, value=random.choice(self.audiencias))
            ws.cell(row=row, column=8, value=f"{random.randint(3, 8)}%")
            ws.cell(row=row, column=9, value=f"{random.randint(8, 15)}%")
            ws.cell(row=row, column=10, value=random.choice(['Alta', 'Media', 'Baja']))
        
        # Auto-adjust columns
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width
        
        filename = f"anchor_texts_ia_marketing_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        wb.save(filename)
        return filename

    def generar_powerpoint(self) -> str:
        """Genera una presentaci√≥n PowerPoint con los anchor texts"""
        from pptx import Presentation
        from pptx.util import Inches, Pt
        from pptx.dml.color import RGBColor
        
        prs = Presentation()
        
        # Slide 1: Title
        slide1 = prs.slides.add_slide(prs.slide_layouts[0])
        title = slide1.shapes.title
        subtitle = slide1.placeholders[1]
        
        title.text = "Anchor Texts IA Marketing"
        subtitle.text = f"Gu√≠a Completa con {len(self.anchor_texts)}+ Variantes"
        
        # Slide 2: Estad√≠sticas
        slide2 = prs.slides.add_slide(prs.slide_layouts[1])
        title2 = slide2.shapes.title
        title2.text = "Estad√≠sticas Clave"
        
        content2 = slide2.placeholders[1]
        content2.text = f"""
        ‚Ä¢ {len(self.anchor_texts)}+ Anchor Texts Generados
        ‚Ä¢ 12 Categor√≠as de Tono
        ‚Ä¢ 10 Industrias Cubiertas
        ‚Ä¢ 50+ F√≥rmulas Desarrolladas
        ‚Ä¢ 2 Herramientas Automatizadas
        ‚Ä¢ CTR Esperado: 3-8%
        ‚Ä¢ Conversi√≥n Esperada: 8-15%
        """
        
        # Slides 3-7: Top Anchor Texts por categor√≠a
        categories = [
            ("Gold Tier", self.anchor_texts[:5]),
            ("Silver Tier", self.anchor_texts[5:10]),
            ("Bronze Tier", self.anchor_texts[10:15]),
            ("Psicol√≥gicos", self.anchor_texts[15:20]),
            ("Por Industria", self.anchor_texts[20:25])
        ]
        
        for cat_name, texts in categories:
            slide = prs.slides.add_slide(prs.slide_layouts[1])
            title = slide.shapes.title
            title.text = cat_name
            
            content = slide.placeholders[1]
            content.text = "\\n".join([f"‚Ä¢ {text}" for text in texts])
        
        filename = f"anchor_texts_ia_marketing_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pptx"
        prs.save(filename)
        return filename

    def generar_markdown_avanzado(self) -> str:
        """Genera un archivo Markdown avanzado con formato profesional"""
        md_content = f"""# üéØ Anchor Texts IA Marketing - Gu√≠a Completa

## üìä Resumen Ejecutivo

| M√©trica | Valor |
|---------|-------|
| Total Anchor Texts | {len(self.anchor_texts)}+ |
| Categor√≠as de Tono | 12 |
| Industrias Cubiertas | 10 |
| F√≥rmulas Desarrolladas | 50+ |
| CTR Esperado | 3-8% |
| Conversi√≥n Esperada | 8-15% |

## üèÜ Top 20 Anchor Texts

### ü•á Gold Tier (M√°xima Conversi√≥n)

"""
        
        for i, text in enumerate(self.anchor_texts[:5], 1):
            md_content += f"{i}. **{text}**\n"
        
        md_content += "\n### ü•à Silver Tier (Alta Conversi√≥n)\n\n"
        
        for i, text in enumerate(self.anchor_texts[5:10], 6):
            md_content += f"{i}. **{text}**\n"
        
        md_content += "\n### ü•â Bronze Tier (Buena Conversi√≥n)\n\n"
        
        for i, text in enumerate(self.anchor_texts[10:15], 11):
            md_content += f"{i}. **{text}**\n"
        
        md_content += "\n## üß† F√≥rmulas Psicol√≥gicas\n\n"
        
        psychological_texts = self.anchor_texts[15:25]
        for i, text in enumerate(psychological_texts, 1):
            md_content += f"### F√≥rmula {i}\n**{text}**\n\n"
        
        md_content += """
## üìà Implementaci√≥n Recomendada

### Fase 1: Selecci√≥n (Semana 1)
- [ ] Identificar 20-30 anchor texts m√°s relevantes
- [ ] Personalizar con datos espec√≠ficos de tu industria
- [ ] Ajustar tono a tu personalidad de marca

### Fase 2: Implementaci√≥n (Semana 2-4)
- [ ] Integrar en contenido existente
- [ ] Crear nuevo contenido optimizado
- [ ] Implementar en estrategia de link building

### Fase 3: Optimizaci√≥n (Semana 5-8)
- [ ] Monitorear m√©tricas de rendimiento
- [ ] A/B testear diferentes variantes
- [ ] Escalar las m√°s exitosas

## üéØ Pr√≥ximos Pasos

1. **Revisa** todos los anchor texts generados
2. **Selecciona** los m√°s relevantes para tu audiencia
3. **Personaliza** con datos espec√≠ficos de tu industria
4. **Implementa** en tu estrategia de contenido
5. **Monitorea** el rendimiento y optimiza

---

*Generado autom√°ticamente el {datetime.now().strftime('%d/%m/%Y a las %H:%M')}*
"""
        
        filename = f"anchor_texts_ia_marketing_avanzado_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(md_content)
        
        return filename

    def generar_json_estructurado(self) -> str:
        """Genera un archivo JSON estructurado con metadatos"""
        data = {
            "metadata": {
                "generated_at": datetime.now().isoformat(),
                "total_anchor_texts": len(self.anchor_texts),
                "version": "1.0",
                "description": "Anchor Texts IA Marketing - Gu√≠a Completa"
            },
            "categories": {
                "gold_tier": self.anchor_texts[:5],
                "silver_tier": self.anchor_texts[5:10],
                "bronze_tier": self.anchor_texts[10:15],
                "psychological": self.anchor_texts[15:25],
                "industry_specific": self.anchor_texts[25:35]
            },
            "formulas": {
                "basic": [
                    "[Acci√≥n] + [Objeto] + [IA Marketing]",
                    "[Adjetivo] + [IA Marketing] + [Beneficio]",
                    "[Tipo] + [IA Marketing] + [Audiencia]"
                ],
                "psychological": [
                    "[Problema] + [Consecuencia] + [IA Marketing] + [Soluci√≥n]",
                    "[Limitaci√≥n] + [IA Marketing] + [Oportunidad] + [Consecuencia]",
                    "[Antes] + [Problema] + [IA Marketing] + [Despu√©s] + [Resultado]"
                ]
            },
            "metrics": {
                "ctr_target": "3-8%",
                "conversion_target": "8-15%",
                "engagement_target": "70-90%",
                "retention_target": "60-80%"
            }
        }
        
        filename = f"anchor_texts_ia_marketing_estructurado_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        return filename

    def generar_todos_los_formatos(self):
        """Genera todos los formatos disponibles"""
        print("üöÄ GENERADOR MULTI-FORMATO DE ANCHOR TEXTS IA MARKETING")
        print("=" * 60)
        
        archivos_generados = []
        
        # HTML Profesional
        print("üîÑ Generando HTML profesional...")
        html_content = self.generar_html_profesional()
        html_file = f"anchor_texts_ia_marketing_interactivo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        archivos_generados.append(html_file)
        print(f"‚úÖ HTML: {html_file}")
        
        # Markdown Avanzado
        print("üîÑ Generando Markdown avanzado...")
        md_file = self.generar_markdown_avanzado()
        archivos_generados.append(md_file)
        print(f"‚úÖ Markdown: {md_file}")
        
        # JSON Estructurado
        print("üîÑ Generando JSON estructurado...")
        json_file = self.generar_json_estructurado()
        archivos_generados.append(json_file)
        print(f"‚úÖ JSON: {json_file}")
        
        # Excel (si est√° disponible)
        try:
            print("üîÑ Generando Excel...")
            excel_file = self.generar_excel()
            archivos_generados.append(excel_file)
            print(f"‚úÖ Excel: {excel_file}")
        except ImportError:
            print("‚ö†Ô∏è Excel: openpyxl no disponible, saltando...")
        
        # PowerPoint (si est√° disponible)
        try:
            print("üîÑ Generando PowerPoint...")
            ppt_file = self.generar_powerpoint()
            archivos_generados.append(ppt_file)
            print(f"‚úÖ PowerPoint: {ppt_file}")
        except ImportError:
            print("‚ö†Ô∏è PowerPoint: python-pptx no disponible, saltando...")
        
        print(f"\nüéâ ¬°Generaci√≥n completada! {len(archivos_generados)} archivos creados:")
        for archivo in archivos_generados:
            print(f"  üìÑ {archivo}")
        
        return archivos_generados

def main():
    """Funci√≥n principal"""
    generador = GeneradorMultiFormato()
    archivos = generador.generar_todos_los_formatos()
    
    print("\nüí° Pr√≥ximos pasos:")
    print("1. Abre el archivo HTML en tu navegador para una experiencia interactiva")
    print("2. Usa el archivo Excel para an√°lisis detallado")
    print("3. Comparte la presentaci√≥n PowerPoint con tu equipo")
    print("4. Implementa los anchor texts en tu estrategia de contenido")

if __name__ == "__main__":
    main()








