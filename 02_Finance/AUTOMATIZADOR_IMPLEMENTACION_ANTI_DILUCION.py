#!/usr/bin/env python3
"""
Automatizador de Implementaci√≥n Anti-Diluci√≥n
Neural Marketing AI - SaaS IA LATAM
Automatiza la implementaci√≥n de estrategias anti-diluci√≥n
"""

import pandas as pd
import numpy as np
import json
import yaml
from datetime import datetime, timedelta
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import requests
import schedule
import time
import logging
from pathlib import Path
import os

class AutomatizadorImplementacionAntiDilucion:
    def __init__(self):
        self.configuracion = {}
        self.metricas = {}
        self.alertas = []
        self.tareas_pendientes = []
        self.logger = self._configurar_logging()
        
    def _configurar_logging(self):
        """Configura sistema de logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('automatizador_anti_dilucion.log'),
                logging.StreamHandler()
            ]
        )
        return logging.getLogger(__name__)
    
    def cargar_configuracion(self, archivo_config='config_anti_dilucion.yaml'):
        """Carga configuraci√≥n del automatizador"""
        try:
            with open(archivo_config, 'r') as f:
                self.configuracion = yaml.safe_load(f)
            self.logger.info("‚úÖ Configuraci√≥n cargada exitosamente")
            return True
        except FileNotFoundError:
            self.logger.warning("‚ö†Ô∏è Archivo de configuraci√≥n no encontrado, creando configuraci√≥n por defecto")
            self._crear_configuracion_default()
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Error cargando configuraci√≥n: {e}")
            return False
    
    def _crear_configuracion_default(self):
        """Crea configuraci√≥n por defecto"""
        self.configuracion = {
            'startup': {
                'nombre': 'Neural Marketing AI',
                'sector': 'AI',
                'pais': 'Mexico',
                'valuacion_actual': 2000000,
                'equity_fundador_actual': 60
            },
            'estrategia': {
                'tipo': 'Clases_Diferenciadas',
                'dilucion_objetivo': 12,
                'equity_final_objetivo': 42,
                'valor_fundador_objetivo': 28500000
            },
            'monitoreo': {
                'frecuencia': 'diaria',
                'alertas': {
                    'dilucion_excesiva': 20,
                    'perdida_control': 40,
                    'valuacion_baja': 15
                }
            },
            'notificaciones': {
                'email': {
                    'habilitado': True,
                    'destinatarios': ['ceo@neuralmarketing.ai'],
                    'smtp_server': 'smtp.gmail.com',
                    'smtp_port': 587
                },
                'slack': {
                    'habilitado': False,
                    'webhook_url': ''
                }
            },
            'integraciones': {
                'cap_table': {
                    'tipo': 'csv',
                    'archivo': 'cap_table.csv'
                },
                'metricas': {
                    'tipo': 'json',
                    'archivo': 'metricas_dilucion.json'
                }
            }
        }
        
        # Guardar configuraci√≥n
        with open('config_anti_dilucion.yaml', 'w') as f:
            yaml.dump(self.configuracion, f, default_flow_style=False)
        
        self.logger.info("‚úÖ Configuraci√≥n por defecto creada")
    
    def inicializar_metricas(self):
        """Inicializa sistema de m√©tricas"""
        self.metricas = {
            'equity_fundador': self.configuracion['startup']['equity_fundador_actual'],
            'dilucion_acumulada': 0,
            'valor_fundador': self.configuracion['startup']['valuacion_actual'] * (self.configuracion['startup']['equity_fundador_actual'] / 100),
            'valuacion_empresa': self.configuracion['startup']['valuacion_actual'],
            'dilucion_por_ronda': 0,
            'control_fundador': 100,
            'ultima_actualizacion': datetime.now().isoformat()
        }
        
        self.logger.info("‚úÖ M√©tricas inicializadas")
    
    def monitorear_dilucion(self):
        """Monitorea m√©tricas de diluci√≥n en tiempo real"""
        try:
            # Simular obtenci√≥n de m√©tricas (en producci√≥n ser√≠a de APIs reales)
            self._actualizar_metricas()
            
            # Verificar alertas
            self._verificar_alertas()
            
            # Guardar m√©tricas
            self._guardar_metricas()
            
            self.logger.info("‚úÖ Monitoreo de diluci√≥n completado")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error en monitoreo: {e}")
    
    def _actualizar_metricas(self):
        """Actualiza m√©tricas de diluci√≥n"""
        # Simular cambios en m√©tricas (en producci√≥n ser√≠a de datos reales)
        cambio_equity = np.random.normal(0, 0.5)  # Cambio aleatorio peque√±o
        cambio_valuacion = np.random.normal(0.02, 0.01)  # Crecimiento peque√±o
        
        # Actualizar m√©tricas
        self.metricas['equity_fundador'] = max(0, min(100, 
            self.metricas['equity_fundador'] + cambio_equity))
        
        self.metricas['valuacion_empresa'] *= (1 + cambio_valuacion)
        self.metricas['valor_fundador'] = self.metricas['valuacion_empresa'] * (self.metricas['equity_fundador'] / 100)
        
        self.metricas['ultima_actualizacion'] = datetime.now().isoformat()
    
    def _verificar_alertas(self):
        """Verifica si se activan alertas"""
        alertas_config = self.configuracion['monitoreo']['alertas']
        nuevas_alertas = []
        
        # Alerta de diluci√≥n excesiva
        if self.metricas['dilucion_por_ronda'] > alertas_config['dilucion_excesiva']:
            alerta = {
                'tipo': 'dilucion_excesiva',
                'mensaje': f"Diluci√≥n por ronda excesiva: {self.metricas['dilucion_por_ronda']:.1f}%",
                'severidad': 'alta',
                'timestamp': datetime.now().isoformat()
            }
            nuevas_alertas.append(alerta)
        
        # Alerta de p√©rdida de control
        if self.metricas['equity_fundador'] < alertas_config['perdida_control']:
            alerta = {
                'tipo': 'perdida_control',
                'mensaje': f"Equity del fundador bajo: {self.metricas['equity_fundador']:.1f}%",
                'severidad': 'critica',
                'timestamp': datetime.now().isoformat()
            }
            nuevas_alertas.append(alerta)
        
        # Alerta de valuaci√≥n baja
        crecimiento_anual = (self.metricas['valuacion_empresa'] / self.configuracion['startup']['valuacion_actual']) - 1
        if crecimiento_anual < (alertas_config['valuacion_baja'] / 100):
            alerta = {
                'tipo': 'valuacion_baja',
                'mensaje': f"Crecimiento de valuaci√≥n bajo: {crecimiento_anual*100:.1f}%",
                'severidad': 'media',
                'timestamp': datetime.now().isoformat()
            }
            nuevas_alertas.append(alerta)
        
        # Agregar nuevas alertas
        self.alertas.extend(nuevas_alertas)
        
        # Enviar notificaciones si hay alertas
        if nuevas_alertas:
            self._enviar_notificaciones(nuevas_alertas)
    
    def _enviar_notificaciones(self, alertas):
        """Env√≠a notificaciones por email y Slack"""
        for alerta in alertas:
            # Email
            if self.configuracion['notificaciones']['email']['habilitado']:
                self._enviar_email(alerta)
            
            # Slack
            if self.configuracion['notificaciones']['slack']['habilitado']:
                self._enviar_slack(alerta)
    
    def _enviar_email(self, alerta):
        """Env√≠a notificaci√≥n por email"""
        try:
            msg = MIMEMultipart()
            msg['From'] = "sistema@neuralmarketing.ai"
            msg['To'] = ", ".join(self.configuracion['notificaciones']['email']['destinatarios'])
            msg['Subject'] = f"üö® Alerta Anti-Diluci√≥n: {alerta['tipo'].upper()}"
            
            body = f"""
            <h2>Alerta de Sistema Anti-Diluci√≥n</h2>
            <p><strong>Tipo:</strong> {alerta['tipo']}</p>
            <p><strong>Severidad:</strong> {alerta['severidad']}</p>
            <p><strong>Mensaje:</strong> {alerta['mensaje']}</p>
            <p><strong>Timestamp:</strong> {alerta['timestamp']}</p>
            
            <h3>M√©tricas Actuales:</h3>
            <ul>
                <li>Equity Fundador: {self.metricas['equity_fundador']:.1f}%</li>
                <li>Valor Fundador: ${self.metricas['valor_fundador']/1000000:.1f}M</li>
                <li>Valuaci√≥n Empresa: ${self.metricas['valuacion_empresa']/1000000:.1f}M</li>
                <li>Diluci√≥n por Ronda: {self.metricas['dilucion_por_ronda']:.1f}%</li>
            </ul>
            
            <p>Revisa el dashboard para m√°s detalles.</p>
            """
            
            msg.attach(MIMEText(body, 'html'))
            
            # En producci√≥n, configurar SMTP real
            self.logger.info(f"üìß Email de alerta preparado: {alerta['tipo']}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error enviando email: {e}")
    
    def _enviar_slack(self, alerta):
        """Env√≠a notificaci√≥n por Slack"""
        try:
            webhook_url = self.configuracion['notificaciones']['slack']['webhook_url']
            
            payload = {
                "text": f"üö® Alerta Anti-Diluci√≥n: {alerta['mensaje']}",
                "attachments": [
                    {
                        "color": "danger" if alerta['severidad'] == 'critica' else "warning",
                        "fields": [
                            {"title": "Tipo", "value": alerta['tipo'], "short": True},
                            {"title": "Severidad", "value": alerta['severidad'], "short": True},
                            {"title": "Equity Fundador", "value": f"{self.metricas['equity_fundador']:.1f}%", "short": True},
                            {"title": "Valor Fundador", "value": f"${self.metricas['valor_fundador']/1000000:.1f}M", "short": True}
                        ]
                    }
                ]
            }
            
            # En producci√≥n, enviar a Slack real
            self.logger.info(f"üí¨ Slack de alerta preparado: {alerta['tipo']}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error enviando Slack: {e}")
    
    def _guardar_metricas(self):
        """Guarda m√©tricas en archivo"""
        try:
            with open(self.configuracion['integraciones']['metricas']['archivo'], 'w') as f:
                json.dump(self.metricas, f, indent=2)
        except Exception as e:
            self.logger.error(f"‚ùå Error guardando m√©tricas: {e}")
    
    def generar_reporte_automatizado(self):
        """Genera reporte automatizado de m√©tricas"""
        try:
            reporte = f"""
# üìä REPORTE AUTOMATIZADO - ANTI-DILUCI√ìN
## Neural Marketing AI (Copy.ai LATAM)
### {datetime.now().strftime('%d de %B de %Y - %H:%M')}

## üéØ M√âTRICAS ACTUALES

### Equity y Control
- **Equity Fundador**: {self.metricas['equity_fundador']:.1f}%
- **Control Fundador**: {self.metricas['control_fundador']:.1f}%
- **Diluci√≥n Acumulada**: {self.metricas['dilucion_acumulada']:.1f}%
- **Diluci√≥n por Ronda**: {self.metricas['dilucion_por_ronda']:.1f}%

### Valor y Valuaci√≥n
- **Valor Fundador**: ${self.metricas['valor_fundador']/1000000:.1f}M
- **Valuaci√≥n Empresa**: ${self.metricas['valuacion_empresa']/1000000:.1f}M
- **Crecimiento Valuaci√≥n**: {((self.metricas['valuacion_empresa'] / self.configuracion['startup']['valuacion_actual']) - 1) * 100:.1f}%

## ‚ö†Ô∏è ALERTAS RECIENTES

"""
            
            if self.alertas:
                for alerta in self.alertas[-5:]:  # √öltimas 5 alertas
                    reporte += f"""
### {alerta['tipo'].upper()} - {alerta['severidad'].upper()}
- **Mensaje**: {alerta['mensaje']}
- **Timestamp**: {alerta['timestamp']}
"""
            else:
                reporte += "\n‚úÖ No hay alertas activas\n"
            
            reporte += f"""

## üìà TENDENCIAS

### Objetivos vs Actual
- **Equity Objetivo**: {self.configuracion['estrategia']['equity_final_objetivo']}%
- **Equity Actual**: {self.metricas['equity_fundador']:.1f}%
- **Diferencia**: {self.metricas['equity_fundador'] - self.configuracion['estrategia']['equity_final_objetivo']:+.1f}%

- **Valor Objetivo**: ${self.configuracion['estrategia']['valor_fundador_objetivo']/1000000:.1f}M
- **Valor Actual**: ${self.metricas['valor_fundador']/1000000:.1f}M
- **Diferencia**: ${(self.metricas['valor_fundador'] - self.configuracion['estrategia']['valor_fundador_objetivo'])/1000000:+.1f}M

## üéØ RECOMENDACIONES AUTOMATIZADAS

"""
            
            # Generar recomendaciones basadas en m√©tricas
            recomendaciones = self._generar_recomendaciones()
            for rec in recomendaciones:
                reporte += f"- {rec}\n"
            
            reporte += f"""

## üìÖ PR√ìXIMAS TAREAS

"""
            
            # Generar tareas pendientes
            tareas = self._generar_tareas_pendientes()
            for tarea in tareas:
                reporte += f"- [ ] {tarea}\n"
            
            reporte += f"""

---
*Generado autom√°ticamente por Sistema Anti-Diluci√≥n - {datetime.now().isoformat()}*
"""
            
            # Guardar reporte
            with open(f'reporte_automatizado_{datetime.now().strftime("%Y%m%d_%H%M")}.md', 'w', encoding='utf-8') as f:
                f.write(reporte)
            
            self.logger.info("‚úÖ Reporte automatizado generado")
            return reporte
            
        except Exception as e:
            self.logger.error(f"‚ùå Error generando reporte: {e}")
            return None
    
    def _generar_recomendaciones(self):
        """Genera recomendaciones basadas en m√©tricas actuales"""
        recomendaciones = []
        
        # Recomendaci√≥n basada en equity
        if self.metricas['equity_fundador'] < self.configuracion['estrategia']['equity_final_objetivo']:
            recomendaciones.append("‚ö†Ô∏è Equity del fundador por debajo del objetivo - considerar estrategias de protecci√≥n")
        
        # Recomendaci√≥n basada en diluci√≥n
        if self.metricas['dilucion_por_ronda'] > self.configuracion['estrategia']['dilucion_objetivo']:
            recomendaciones.append("üõ°Ô∏è Diluci√≥n por ronda excesiva - implementar mecanismos anti-diluci√≥n")
        
        # Recomendaci√≥n basada en valor
        if self.metricas['valor_fundador'] < self.configuracion['estrategia']['valor_fundador_objetivo']:
            recomendaciones.append("üìà Valor del fundador por debajo del objetivo - enfocar en crecimiento de valuaci√≥n")
        
        # Recomendaciones generales
        recomendaciones.extend([
            "üìä Monitorear m√©tricas diariamente",
            "‚öñÔ∏è Consultar asesor√≠a legal especializada",
            "ü§ù Desarrollar strategic partnerships",
            "üìã Preparar pr√≥ximas rondas con diluci√≥n controlada"
        ])
        
        return recomendaciones
    
    def _generar_tareas_pendientes(self):
        """Genera tareas pendientes basadas en m√©tricas"""
        tareas = []
        
        # Tareas basadas en alertas
        for alerta in self.alertas[-3:]:  # √öltimas 3 alertas
            if alerta['tipo'] == 'dilucion_excesiva':
                tareas.append("Implementar mecanismos anti-diluci√≥n inmediatamente")
            elif alerta['tipo'] == 'perdida_control':
                tareas.append("Revisar estructura de equity y governance")
            elif alerta['tipo'] == 'valuacion_baja':
                tareas.append("Analizar estrategia de crecimiento y valuaci√≥n")
        
        # Tareas generales
        tareas.extend([
            "Actualizar cap table con √∫ltima ronda",
            "Revisar t√©rminos de acuerdos existentes",
            "Preparar presentaci√≥n para inversionistas",
            "Desarrollar alternativas de financiamiento",
            "Monitorear m√©tricas de competidores"
        ])
        
        return tareas
    
    def programar_tareas_automaticas(self):
        """Programa tareas autom√°ticas"""
        # Monitoreo diario
        schedule.every().day.at("09:00").do(self.monitorear_dilucion)
        
        # Reporte semanal
        schedule.every().monday.at("10:00").do(self.generar_reporte_automatizado)
        
        # Limpieza de alertas mensual
        schedule.every().month.do(self._limpiar_alertas_antiguas)
        
        self.logger.info("‚úÖ Tareas autom√°ticas programadas")
    
    def _limpiar_alertas_antiguas(self):
        """Limpia alertas antiguas"""
        # Mantener solo alertas de los √∫ltimos 30 d√≠as
        cutoff_date = datetime.now() - timedelta(days=30)
        self.alertas = [alerta for alerta in self.alertas 
                       if datetime.fromisoformat(alerta['timestamp']) > cutoff_date]
        
        self.logger.info("üßπ Alertas antiguas limpiadas")
    
    def ejecutar_automatizador(self):
        """Ejecuta el automatizador principal"""
        self.logger.info("üöÄ Iniciando automatizador de implementaci√≥n anti-diluci√≥n")
        
        # Cargar configuraci√≥n
        if not self.cargar_configuracion():
            return False
        
        # Inicializar m√©tricas
        self.inicializar_metricas()
        
        # Programar tareas autom√°ticas
        self.programar_tareas_automaticas()
        
        # Ejecutar monitoreo inicial
        self.monitorear_dilucion()
        
        # Generar reporte inicial
        self.generar_reporte_automatizado()
        
        self.logger.info("‚úÖ Automatizador iniciado exitosamente")
        
        # Ejecutar loop principal
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)  # Verificar cada minuto
        except KeyboardInterrupt:
            self.logger.info("üõë Automatizador detenido por usuario")
        except Exception as e:
            self.logger.error(f"‚ùå Error en automatizador: {e}")
        
        return True

def main():
    """Funci√≥n principal"""
    automatizador = AutomatizadorImplementacionAntiDilucion()
    
    print("=" * 80)
    print("ü§ñ AUTOMATIZADOR DE IMPLEMENTACI√ìN ANTI-DILUCI√ìN")
    print("Neural Marketing AI (Copy.ai LATAM)")
    print("=" * 80)
    
    # Ejecutar automatizador
    automatizador.ejecutar_automatizador()

if __name__ == "__main__":
    main()



